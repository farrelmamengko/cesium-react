name: Deploy to NAS

on:
  push:
    branches: [ main ]  # Sesuaikan dengan branch Anda (main atau master)
  workflow_dispatch:

permissions:
  contents: read
  packages: write  # Izin untuk push ke GitHub Container Registry

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
    
    - name: Login to GitHub Container Registry
      uses: docker/login-action@v2
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v4
      with:
        context: .
        push: true
        tags: ghcr.io/${{ github.repository }}:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Install SSH client and sshpass
      run: |
        sudo apt-get update
        sudo apt-get install -y openssh-client sshpass netcat-openbsd
        mkdir -p ~/.ssh
        chmod 700 ~/.ssh
        ssh-keyscan -p ${{ secrets.NAS_PORT }} ${{ secrets.NAS_HOST }} >> ~/.ssh/known_hosts 2>/dev/null || true
        chmod 600 ~/.ssh/known_hosts
    
    - name: Debug SSH Connection
      env:
        SSHPASS: ${{ secrets.NAS_PASSWORD }}
      continue-on-error: true
      run: |
        echo "Checking SSH connection to NAS..."
        echo "Host: ${{ secrets.NAS_HOST }}"
        echo "Port: ${{ secrets.NAS_PORT }}"
        echo "Username: ${{ secrets.NAS_USERNAME }}"
        
        # Cek koneksi dengan timeout yang lebih pendek
        export SSHPASS="$SSHPASS"
        timeout 10 sshpass -e ssh -v -o StrictHostKeyChecking=no -o ConnectTimeout=5 -p ${{ secrets.NAS_PORT }} ${{ secrets.NAS_USERNAME }}@${{ secrets.NAS_HOST }} 'echo "SSH connection test"' || echo "SSH connection failed with status $?"
        
        # Cek apakah port SSH terbuka
        echo "Checking if SSH port is open..."
        nc -z ${{ secrets.NAS_HOST }} ${{ secrets.NAS_PORT }} -w 10 || echo "Port check failed with status $?"
        
        # Cek koneksi SSH dengan opsi yang lebih sederhana
        echo "Testing SSH connection..."
        export SSHPASS="$SSHPASS"
        sshpass -e ssh -o StrictHostKeyChecking=no -o ConnectTimeout=30 -p ${{ secrets.NAS_PORT }} ${{ secrets.NAS_USERNAME }}@${{ secrets.NAS_HOST }} 'echo "SSH connection test"' || echo "SSH connection failed with status $?"
    
    - name: Create deployment script
      run: |
        cat > deploy.sh << 'EOL'
        #!/bin/bash
        
        echo "Starting deployment as user: $(whoami)"
        echo "Current directory: $(pwd)"
        
        # Buat direktori jika belum ada
        mkdir -p /volume1/docker/cesium-react
        cd /volume1/docker/cesium-react
        
        # Buat direktori uploads dan terrain-cache jika belum ada
        mkdir -p uploads
        mkdir -p terrain-cache
        mkdir -p build
        
        # Set default Docker command
        docker_cmd="/usr/local/bin/docker"
        
        # Check if default path exists, if not try alternatives
        if [ ! -x "$docker_cmd" ]; then
          for cmd in "/volume1/@appstore/Docker/usr/bin/docker" "/usr/bin/docker"; do
            if [ -x "$cmd" ]; then
              docker_cmd="$cmd"
              echo "Found Docker at $docker_cmd"
              break
            fi
          done
        fi
        
        # Verify Docker was found
        if [ ! -x "$docker_cmd" ]; then
          echo "Docker not found in any expected location"
          exit 1
        fi
        
        # Check if docker-compose exists
        compose_cmd=""
        for cmd in "/usr/local/bin/docker-compose" "/volume1/@appstore/Docker/usr/bin/docker-compose" "/usr/bin/docker-compose"; do
          if [ -x "$cmd" ]; then
            compose_cmd="$cmd"
            echo "Found Docker Compose at $compose_cmd"
            break
          fi
        done
        
        # Login ke GitHub Container Registry
        echo "${GITHUB_TOKEN}" | $docker_cmd login ghcr.io -u "${GITHUB_ACTOR}" --password-stdin
        
        # Pull image terbaru
        $docker_cmd pull ghcr.io/${GITHUB_REPOSITORY}:latest
        
        # Buat atau perbarui docker-compose.yml
        cat > docker-compose.yml << 'EOF'
        services:
          app:
            image: ghcr.io/${GITHUB_REPOSITORY}:latest
            ports:
              - "5004:5004"
            environment:
              - MONGODB_URI=mongodb://mongodb:27017/belajaroutcrop-db
              - PORT=5004
              - REACT_APP_API_URL=http://203.153.109.226:5004
            volumes:
              - ./uploads:/app/uploads
              - ./build:/app/build
              - ./terrain-cache:/app/terrain-cache
            depends_on:
              - mongodb
            restart: unless-stopped
            networks:
              - cesium-network
          
          mongodb:
            image: mongo:6
            ports:
              - "27018:27017"
            volumes:
              - mongodb_data:/data/db
              - ./mongo-seed:/mongo-seed
            restart: unless-stopped
            networks:
              - cesium-network
        
        volumes:
          mongodb_data:
        
        networks:
          cesium-network:
            driver: bridge
        EOF
        
        # Ganti variabel di docker-compose.yml
        sed -i "s|\${GITHUB_REPOSITORY}|${GITHUB_REPOSITORY}|g" docker-compose.yml
        sed -i "s|\${NAS_HOST}|${NAS_HOST}|g" docker-compose.yml
        
        echo "Created docker-compose.yml file"
        
        # Buat file .env.production
        cat > .env.production << 'EOF'
        MONGODB_URI=mongodb://mongodb:27017/belajaroutcrop-db
        PORT=5004
        REACT_APP_API_URL=http://203.153.109.226:5004
        EOF
        
        echo "Created .env.production file"
        
        # Restart containers menggunakan docker-compose jika tersedia
        if [ -n "$compose_cmd" ]; then
          echo "Using Docker Compose for deployment..."
          $compose_cmd down
          $compose_cmd up -d
        else
          # Fallback ke docker run jika docker-compose tidak tersedia
          echo "Docker Compose not found, using Docker run instead..."
          
          # Stop dan hapus container yang sudah ada
          $docker_cmd stop cesium-react-app 2>/dev/null || true
          $docker_cmd rm cesium-react-app 2>/dev/null || true
          $docker_cmd stop cesium-react-mongodb 2>/dev/null || true
          $docker_cmd rm cesium-react-mongodb 2>/dev/null || true
          
          # Buat network
          $docker_cmd network create cesium-network 2>/dev/null || true
          
          # Jalankan MongoDB
          $docker_cmd run -d \
            --name cesium-react-mongodb \
            --network cesium-network \
            --restart unless-stopped \
            -p 27018:27017 \
            -v mongodb_data:/data/db \
            -v "$(pwd)/mongo-seed:/mongo-seed" \
            mongo:6
          
          # Jalankan aplikasi
          $docker_cmd run -d \
            --name cesium-react-app \
            --network cesium-network \
            --restart unless-stopped \
            -p 5004:5004 \
            -e MONGODB_URI="mongodb://cesium-react-mongodb:27017/belajaroutcrop-db" \
            -e PORT="5004" \
            -e REACT_APP_API_URL="http://${NAS_HOST}:5004" \
            -v "$(pwd)/uploads:/app/uploads" \
            -v "$(pwd)/build:/app/build" \
            -v "$(pwd)/terrain-cache:/app/terrain-cache" \
            --link cesium-react-mongodb:mongodb \
            ghcr.io/${GITHUB_REPOSITORY}:latest
        fi
        
        # Bersihkan image yang tidak digunakan
        $docker_cmd image prune -f
        
        echo "Deployment completed successfully"
        echo "Application should be available at http://${NAS_HOST}:5004"
        EOL
        
        chmod +x deploy.sh
    
    - name: Deploy to NAS
      env:
        SSHPASS: ${{ secrets.NAS_PASSWORD }}
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        GITHUB_ACTOR: ${{ github.actor }}
        GITHUB_REPOSITORY: ${{ github.repository }}
        NAS_HOST: ${{ secrets.NAS_HOST }}
      run: |
        export SSHPASS="$SSHPASS"
        
        # Coba koneksi SSH sederhana
        echo "Attempting SSH connection..."
        sshpass -e ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -p ${{ secrets.NAS_PORT }} ${{ secrets.NAS_USERNAME }}@${{ secrets.NAS_HOST }} 'echo "SSH connection successful"'
        
        # Buat direktori home jika belum ada
        echo "Creating directory for deployment script..."
        sshpass -e ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -p ${{ secrets.NAS_PORT }} ${{ secrets.NAS_USERNAME }}@${{ secrets.NAS_HOST }} 'mkdir -p $HOME/scripts'
        
        # Upload script deployment ke NAS
        echo "Uploading deployment script to NAS..."
        sshpass -e scp -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -P ${{ secrets.NAS_PORT }} deploy.sh ${{ secrets.NAS_USERNAME }}@${{ secrets.NAS_HOST }}:$HOME/scripts/deploy.sh
        
        # Jalankan script deployment di NAS
        echo "Running deployment script on NAS..."
        sshpass -e ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null -p ${{ secrets.NAS_PORT }} ${{ secrets.NAS_USERNAME }}@${{ secrets.NAS_HOST }} "
          chmod +x $HOME/scripts/deploy.sh
          export GITHUB_TOKEN=\"${GITHUB_TOKEN}\"
          export GITHUB_ACTOR=\"${GITHUB_ACTOR}\"
          export GITHUB_REPOSITORY=\"${GITHUB_REPOSITORY}\"
          export NAS_HOST=\"${NAS_HOST}\"
          $HOME/scripts/deploy.sh
        "