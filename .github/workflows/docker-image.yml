name: Docker Build and Registry

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:

env:
  DOCKER_REPOSITORY: cesium-react
  DOCKER_IMAGE_TAG: ${{ github.sha }}

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
      with:
        driver: docker-container
        buildkitd-flags: --allow-insecure-entitlement security.insecure --allow-insecure-entitlement network.host
    
    - name: Login to Docker Hub
      uses: docker/login-action@v2
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
    
    - name: Build and push
      uses: docker/build-push-action@v4
      with:
        context: .
        push: true
        tags: ${{ secrets.DOCKER_USERNAME }}/${{ env.DOCKER_REPOSITORY }}:${{ env.DOCKER_IMAGE_TAG }},${{ secrets.DOCKER_USERNAME }}/${{ env.DOCKER_REPOSITORY }}:latest
        build-args: |
          MONGODB_URI=${{ secrets.MONGODB_URI }}
          PORT=5001
          REACT_APP_API_URL=${{ secrets.REACT_APP_API_URL }}
        cache-from: type=registry,ref=${{ secrets.DOCKER_USERNAME }}/${{ env.DOCKER_REPOSITORY }}:buildcache
        cache-to: type=registry,ref=${{ secrets.DOCKER_USERNAME }}/${{ env.DOCKER_REPOSITORY }}:buildcache,mode=max

  deploy-staging:
    needs: deploy
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    
    - name: Install SSH client and sshpass
      run: |
        sudo apt-get update
        sudo apt-get install -y openssh-client sshpass
        mkdir -p ~/.ssh
        ssh-keyscan -p ${{ secrets.NAS_PORT }} ${{ secrets.NAS_HOST }} >> ~/.ssh/known_hosts
    
    - name: Debug SSH Connection
      env:
        SSHPASS: ${{ secrets.NAS_PASSWORD }}
      run: |
        echo "Checking SSH connection to NAS..."
        echo "Host: ${{ secrets.NAS_HOST }}"
        echo "Port: ${{ secrets.NAS_PORT }}"
        echo "Username: ${{ secrets.NAS_USERNAME }}"
        
        # Cek koneksi dengan timeout yang lebih pendek
        timeout 10 sshpass -e ssh -v -o StrictHostKeyChecking=no -o ConnectTimeout=5 -p ${{ secrets.NAS_PORT }} ${{ secrets.NAS_USERNAME }}@${{ secrets.NAS_HOST }} 'echo "SSH connection test"' || echo "SSH connection failed with status $?"
        
        # Cek apakah port SSH terbuka
        echo "Checking if SSH port is open..."
        nc -zv ${{ secrets.NAS_HOST }} ${{ secrets.NAS_PORT }} -w 5 || echo "Port check failed with status $?"
    
    - name: Deploy to NAS
      env:
        SSHPASS: ${{ secrets.NAS_PASSWORD }}
      run: |
        export SSHPASS="$SSHPASS"
        
        # Gunakan opsi SSH tambahan untuk mengatasi masalah banner
        SSH_OPTS="-o StrictHostKeyChecking=no -o ConnectTimeout=30 -o ServerAliveInterval=60 -o ServerAliveCountMax=10 -o LogLevel=DEBUG3"
        
        echo "Attempting SSH connection with enhanced options..."
        sshpass -e ssh $SSH_OPTS -p ${{ secrets.NAS_PORT }} ${{ secrets.NAS_USERNAME }}@${{ secrets.NAS_HOST }} 'echo "SSH connection successful"' || echo "SSH connection failed with status $?"
        
        # Buat script deployment
        cat > deploy.sh << 'EOL'
        #!/bin/bash
        
        echo "Starting deployment as user: $(whoami)"
        echo "Current directory: $(pwd)"
        
        # Change to project directory
        cd /volume1/docker/cesium-react
        if [ $? -ne 0 ]; then
          echo "Failed to change directory, creating it..."
          mkdir -p /volume1/docker/cesium-react
          cd /volume1/docker/cesium-react
        fi
        
        # Create uploads directory if it doesn't exist
        mkdir -p uploads
        
        # Set default Docker command
        docker_cmd="/usr/local/bin/docker"
        
        # Check if default path exists, if not try alternatives
        if [ ! -x "$docker_cmd" ]; then
          for cmd in "/volume1/@appstore/Docker/usr/bin/docker" "/usr/bin/docker"; do
            if [ -x "$cmd" ]; then
              docker_cmd="$cmd"
              echo "Found Docker at $docker_cmd"
              break
            fi
          done
        fi
        
        # Verify Docker was found
        if [ ! -x "$docker_cmd" ]; then
          echo "Docker not found in any expected location"
          exit 1
        fi
        
        # Check if docker-compose exists
        compose_cmd=""
        for cmd in "/usr/local/bin/docker-compose" "/volume1/@appstore/Docker/usr/bin/docker-compose" "/usr/bin/docker-compose"; do
          if [ -x "$cmd" ]; then
            compose_cmd="$cmd"
            echo "Found Docker Compose at $compose_cmd"
            break
          fi
        done
        
        # Create or update docker-compose.yml file
        cat > docker-compose.yml << 'EOF'
        version: '3'
        
        services:
          app:
            image: ${DOCKER_USERNAME}/cesium-react:latest
            container_name: cesium-react-app
            restart: always
            ports:
              - "5001:5001"
            environment:
              - MONGODB_URI=mongodb://mongodb:27017/belajaroutcrop-db
              - PORT=5001
              - REACT_APP_API_URL=http://${NAS_HOST}:5001
            volumes:
              - ./uploads:/app/uploads
            depends_on:
              - mongodb
        
          mongodb:
            image: mongo:6
            container_name: cesium-react-mongodb
            restart: always
            ports:
              - "27018:27017"
            volumes:
              - mongodb_data:/data/db
              - ./mongo-seed:/mongo-seed
        
        volumes:
          mongodb_data:
        EOF
        
        # Ganti variabel di docker-compose.yml
        sed -i "s|\${DOCKER_USERNAME}|${DOCKER_USERNAME}|g" docker-compose.yml
        sed -i "s|\${NAS_HOST}|${NAS_HOST}|g" docker-compose.yml
        
        echo "Created docker-compose.yml file"
        
        # Stop and remove existing containers if running
        echo "Stopping existing containers if running..."
        $docker_cmd stop cesium-react-app 2>/dev/null || true
        $docker_cmd rm cesium-react-app 2>/dev/null || true
        $docker_cmd stop cesium-react-mongodb 2>/dev/null || true
        $docker_cmd rm cesium-react-mongodb 2>/dev/null || true
        
        # Pull the latest image
        echo "Pulling latest image..."
        $docker_cmd pull ${DOCKER_USERNAME}/cesium-react:latest
        
        # Try using docker-compose if available
        if [ -n "$compose_cmd" ]; then
          echo "Using Docker Compose for deployment..."
          $compose_cmd down
          $compose_cmd up -d
        else
          # Fallback to using docker run directly
          echo "Using Docker run for deployment..."
          
          # Create a network for the containers
          $docker_cmd network create cesium-network 2>/dev/null || true
          
          # Run MongoDB container
          $docker_cmd run -d \
            --name cesium-react-mongodb \
            --network cesium-network \
            --restart always \
            -p 27018:27017 \
            -v mongodb_data:/data/db \
            -v "$(pwd)/mongo-seed:/mongo-seed" \
            mongo:6
          
          # Run app container
          $docker_cmd run -d \
            --name cesium-react-app \
            --network cesium-network \
            --restart always \
            -p 5001:5001 \
            -e MONGODB_URI="mongodb://cesium-react-mongodb:27017/belajaroutcrop-db" \
            -e PORT="5001" \
            -e REACT_APP_API_URL="http://${NAS_HOST}:5001" \
            -v "$(pwd)/uploads:/app/uploads" \
            --link cesium-react-mongodb:mongodb \
            ${DOCKER_USERNAME}/cesium-react:latest
        fi
        
        echo "Deployment completed successfully"
        echo "Application should be available at http://${NAS_HOST}:5001"
        EOL
        
        chmod +x deploy.sh
        
        # Kirim script ke NAS
        echo "Copying deployment script..."
        sshpass -e scp -P ${{ secrets.NAS_PORT }} deploy.sh ${{ secrets.NAS_USERNAME }}@${{ secrets.NAS_HOST }}:/tmp/ || echo "SCP failed with status $?"
        
        # Jalankan script di NAS
        echo "Running deployment script..."
        sshpass -e ssh $SSH_OPTS -p ${{ secrets.NAS_PORT }} ${{ secrets.NAS_USERNAME }}@${{ secrets.NAS_HOST }} "export DOCKER_USERNAME='${{ secrets.DOCKER_USERNAME }}' NAS_HOST='${{ secrets.NAS_HOST }}' && bash /tmp/deploy.sh" || echo "Deployment failed with status $?" 