name: Deploy to NAS

on:
  push:
    branches: [ main ]  # Sesuaikan dengan branch Anda (main atau master)
  workflow_dispatch:

permissions:
  contents: read
  packages: write  # Izin untuk push ke GitHub Container Registry

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
    
    - name: Login to GitHub Container Registry
      uses: docker/login-action@v2
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v4
      with:
        context: .
        push: true
        tags: ghcr.io/${{ github.repository_owner }}/${{ github.event.repository.name }}:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max
    
    - name: Install SSH client, sshpass and netcat
      run: |
        sudo apt-get update
        sudo apt-get install -y openssh-client sshpass netcat-openbsd
        mkdir -p ~/.ssh
        chmod 700 ~/.ssh
        ssh-keyscan -p ${{ secrets.NAS_PORT }} ${{ secrets.NAS_HOST }} >> ~/.ssh/known_hosts
        chmod 600 ~/.ssh/known_hosts
    
    - name: Debug SSH Connection
      env:
        SSHPASS: ${{ secrets.NAS_PASSWORD }}
      continue-on-error: true
      run: |
        echo "Checking SSH connection to NAS..."
        echo "Host: ${{ secrets.NAS_HOST }}"
        echo "Port: ${{ secrets.NAS_PORT }}"
        echo "Username: ${{ secrets.NAS_USERNAME }}"
        
        # Cek apakah port SSH terbuka
        echo "Checking if SSH port is open..."
        nc -z ${{ secrets.NAS_HOST }} ${{ secrets.NAS_PORT }} -w 10 || echo "Port check failed with status $?"
        
        # Cek koneksi SSH
        echo "Testing SSH connection..."
        sshpass -e ssh -o StrictHostKeyChecking=no -o ConnectTimeout=10 -p ${{ secrets.NAS_PORT }} ${{ secrets.NAS_USERNAME }}@${{ secrets.NAS_HOST }} 'echo "SSH connection test"' || echo "SSH connection failed with status $?"
    
    - name: Create deployment script
      run: |
        # Simpan nilai repository untuk digunakan dalam script
        REPO="${{ github.repository_owner }}/${{ github.event.repository.name }}"
        
        cat > deploy.sh << EOL
        #!/bin/bash
        
        echo "Starting deployment as user: \$(whoami)"
        echo "Current directory: \$(pwd)"
        
        # Variabel yang diterima dari GitHub Actions
        GITHUB_REPOSITORY="${REPO}"
        NAS_HOST="\${NAS_HOST}"
        
        # Buat direktori jika belum ada
        mkdir -p /volume1/docker/cesium-react
        cd /volume1/docker/cesium-react
        
        # Buat direktori uploads jika belum ada
        mkdir -p uploads
        
        # Set default Docker command
        docker_cmd="/usr/local/bin/docker"
        
        # Check if default path exists, if not try alternatives
        if [ ! -x "\$docker_cmd" ]; then
          for cmd in "/volume1/@appstore/Docker/usr/bin/docker" "/usr/bin/docker"; do
            if [ -x "\$cmd" ]; then
              docker_cmd="\$cmd"
              echo "Found Docker at \$docker_cmd"
              break
            fi
          done
        fi
        
        # Verify Docker was found
        if [ ! -x "\$docker_cmd" ]; then
          echo "Docker not found in any expected location"
          exit 1
        fi
        
        # Check if docker-compose exists
        compose_cmd=""
        for cmd in "/usr/local/bin/docker-compose" "/volume1/@appstore/Docker/usr/bin/docker-compose" "/usr/bin/docker-compose"; do
          if [ -x "\$cmd" ]; then
            compose_cmd="\$cmd"
            echo "Found Docker Compose at \$compose_cmd"
            break
          fi
        done
        
        # Login ke GitHub Container Registry
        echo "\${GITHUB_TOKEN}" | \$docker_cmd login ghcr.io -u "\${GITHUB_ACTOR}" --password-stdin
        
        # Pull image terbaru
        \$docker_cmd pull ghcr.io/\${GITHUB_REPOSITORY}:latest
        
        # Buat atau perbarui docker-compose.yml
        cat > docker-compose.yml << EOF
        version: '3'
        
        services:
          app:
            image: ghcr.io/\${GITHUB_REPOSITORY}:latest
            container_name: cesium-react-app
            ports:
              - "5001:5001"
            environment:
              - MONGODB_URI=mongodb://mongodb:27017/belajaroutcrop-db
              - PORT=5001
              - REACT_APP_API_URL=http://\${NAS_HOST}:5001
            volumes:
              - ./uploads:/app/uploads
            depends_on:
              - mongodb
            restart: unless-stopped
          
          mongodb:
            image: mongo:6
            container_name: cesium-react-mongodb
            ports:
              - "27018:27017"
            volumes:
              - mongodb_data:/data/db
              - ./mongo-seed:/mongo-seed
            restart: unless-stopped
        
        volumes:
          mongodb_data:
        EOF
        
        echo "Created docker-compose.yml file"
        
        # Restart containers menggunakan docker-compose jika tersedia
        if [ -n "\$compose_cmd" ]; then
          echo "Using Docker Compose for deployment..."
          \$compose_cmd down
          \$compose_cmd up -d
        else
          # Fallback ke docker run jika docker-compose tidak tersedia
          echo "Docker Compose not found, using Docker run instead..."
          
          # Stop dan hapus container yang sudah ada
          \$docker_cmd stop cesium-react-app 2>/dev/null || true
          \$docker_cmd rm cesium-react-app 2>/dev/null || true
          \$docker_cmd stop cesium-react-mongodb 2>/dev/null || true
          \$docker_cmd rm cesium-react-mongodb 2>/dev/null || true
          
          # Buat network
          \$docker_cmd network create cesium-network 2>/dev/null || true
          
          # Jalankan MongoDB
          \$docker_cmd run -d \\
            --name cesium-react-mongodb \\
            --network cesium-network \\
            --restart unless-stopped \\
            -p 27018:27017 \\
            -v mongodb_data:/data/db \\
            -v "\$(pwd)/mongo-seed:/mongo-seed" \\
            mongo:6
          
          # Jalankan aplikasi
          \$docker_cmd run -d \\
            --name cesium-react-app \\
            --network cesium-network \\
            --restart unless-stopped \\
            -p 5001:5001 \\
            -e MONGODB_URI="mongodb://cesium-react-mongodb:27017/belajaroutcrop-db" \\
            -e PORT="5001" \\
            -e REACT_APP_API_URL="http://\${NAS_HOST}:5001" \\
            -v "\$(pwd)/uploads:/app/uploads" \\
            --link cesium-react-mongodb:mongodb \\
            ghcr.io/\${GITHUB_REPOSITORY}:latest
        fi
        
        # Bersihkan image yang tidak digunakan
        \$docker_cmd image prune -f
        
        echo "Deployment completed successfully"
        echo "Application should be available at http://\${NAS_HOST}:5001"
        EOL
        
        chmod +x deploy.sh
    
    - name: Deploy to NAS using sshpass
      env:
        SSHPASS: ${{ secrets.NAS_PASSWORD }}
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        GITHUB_ACTOR: ${{ github.actor }}
      continue-on-error: true
      run: |
        # Tambahkan opsi debug untuk melihat masalah koneksi
        export SSHPASS="$SSHPASS"
        
        # Gunakan opsi SSH yang lebih sederhana
        SSH_OPTS="-o StrictHostKeyChecking=no -o ConnectTimeout=30"
        
        echo "Attempting SSH connection..."
        sshpass -e ssh $SSH_OPTS -p ${{ secrets.NAS_PORT }} ${{ secrets.NAS_USERNAME }}@${{ secrets.NAS_HOST }} 'echo "SSH connection successful"' || echo "SSH connection failed with status $?"
        
        # Jika koneksi berhasil, lanjutkan dengan deployment
        echo "Copying deployment script..."
        sshpass -e scp -P ${{ secrets.NAS_PORT }} -o StrictHostKeyChecking=no deploy.sh ${{ secrets.NAS_USERNAME }}@${{ secrets.NAS_HOST }}:/tmp/ || echo "SCP failed with status $?"
        
        echo "Running deployment script..."
        sshpass -e ssh $SSH_OPTS -p ${{ secrets.NAS_PORT }} ${{ secrets.NAS_USERNAME }}@${{ secrets.NAS_HOST }} "export GITHUB_TOKEN='${{ secrets.GITHUB_TOKEN }}' GITHUB_ACTOR='${{ github.actor }}' GITHUB_REPOSITORY='${{ github.repository_owner }}/${{ github.event.repository.name }}' NAS_HOST='${{ secrets.NAS_HOST }}' && bash /tmp/deploy.sh" || echo "Deployment failed with status $?" 